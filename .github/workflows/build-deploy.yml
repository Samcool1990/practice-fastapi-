name: Build and Deploy Code

on: [push, pull_request]
# on: 
#   push:
#     branches:
#       - "main"
  #     #- "another branch"  # mention list of branches
  # pull_request:
  #   branches:
  #     - "test_branch"  
# env:
#   DATABSE_HOSTNAME: localhost
#   DATABASE_PORT: 5432
#   DATABASE_PASSWORD: 321456
#   DATABASE_NAME: My FASTAPI DATABSE local
#   DATABASE_USERNAME: postgres
#   SECRET_KEY: 19d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
#   ALGORITHM: HS256
#   ACCESS_TOKEN_EXPIRE_MINUTES: 60 


jobs:
  build:
    environment:
      name: testing
    env:
      DATABSE_HOSTNAME: ${{secrets.DATABSE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}  

    services:
      postgres:
        image: postgres
        env: 
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}     
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432  #### secrets will not work
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v3
      - name: Install python version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9' 
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: 
          pip install pytest
          pytest -v

      # - 
      #   name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      # - 
      #   name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v2
      # - 
      #   name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
      # - 
      #   name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

      - name: deploy to ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.PROD_HOST}}
          username: ${{secrets.PROD_USERNAME}}
          password: ${{secrets.PROD_PASSWORD}}
          script: |
            cd app/src
            git pull
            echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api
      # login to our ubuntu
      # cd /app/src
      # git pull
      # systemctl restart api
    #pull our git repo    
    #install heroku
    #heroku login
    #add git remote for heroku
    #git push heroku main


















#dckr_pat_WQkfw25ug9L93DXbVw70CKkO-g0
